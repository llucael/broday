{
  "name": "5. Testes de Usabilidade",
  "item": [
    {
      "name": "Facilidade de Uso - Interface de API",
      "item": [
        {
          "name": "Mensagens de Erro Claras - Login Inválido",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"email_invalido\",\n  \"password\": \"123\",\n  \"userType\": \"cliente\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error message is clear and helpful', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "    pm.expect(jsonData.message.length).to.be.at.least(10);",
                  "    ",
                  "    // Verificar se a mensagem não é muito técnica",
                  "    pm.expect(jsonData.message).to.not.include('undefined');",
                  "    pm.expect(jsonData.message).to.not.include('null');",
                  "});",
                  "",
                  "pm.test('Error response structure is consistent', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validação de Campos - Mensagens Específicas",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"\",\n  \"password\": \"\",\n  \"userType\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Validation errors are specific and actionable', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    if (jsonData.errors && jsonData.errors.length > 0) {",
                  "        jsonData.errors.forEach(error => {",
                  "            pm.expect(error).to.have.property('field');",
                  "            pm.expect(error).to.have.property('message');",
                  "            pm.expect(error.message).to.be.a('string');",
                  "            pm.expect(error.message.length).to.be.at.least(5);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Resposta de Sucesso - Informações Completas",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Success response provides all necessary information', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('tokens');",
                  "    ",
                  "    // Verificar se as informações do usuário são completas",
                  "    const user = jsonData.data.user;",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('userType');",
                  "    ",
                  "    // Verificar se os tokens estão presentes",
                  "    const tokens = jsonData.data.tokens;",
                  "    pm.expect(tokens).to.have.property('accessToken');",
                  "    pm.expect(tokens).to.have.property('refreshToken');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Intuitividade - Navegação e Estrutura",
      "item": [
        {
          "name": "Estrutura de URLs Lógica",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API structure is intuitive and logical', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    // Verificar se os endpoints seguem uma estrutura lógica",
                  "    const endpoints = jsonData.endpoints;",
                  "    pm.expect(endpoints).to.have.property('auth');",
                  "    pm.expect(endpoints).to.have.property('fretes');",
                  "    pm.expect(endpoints).to.have.property('health');",
                  "    ",
                  "    // Verificar se as URLs são RESTful",
                  "    pm.expect(endpoints.auth).to.include('/auth');",
                  "    pm.expect(endpoints.fretes).to.include('/fretes');",
                  "    pm.expect(endpoints.health).to.include('/health');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Consistência de Respostas",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response format is consistent across endpoints', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    // Verificar estrutura padrão de resposta",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.success).to.be.a('boolean');",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "    ",
                  "    // Verificar se não há campos inesperados",
                  "    const allowedFields = ['success', 'message', 'data', 'timestamp', 'version', 'errors'];",
                  "    Object.keys(jsonData).forEach(key => {",
                  "        pm.expect(allowedFields).to.include(key);",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Experiência do Usuário - Performance e Feedback",
      "item": [
        {
          "name": "Tempo de Resposta Aceitável",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is acceptable for good UX', function () {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    // Tempo de resposta deve ser menor que 1 segundo para boa UX",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response time is consistent', function () {",
                  "    // Verificar se o tempo não varia muito (consistência)",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Feedback Visual - Headers Informativos",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response headers provide useful information', function () {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    // Verificar headers úteis para o cliente",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "    ",
                  "    // Verificar se há headers de cache se aplicável",
                  "    const cacheControl = pm.response.headers.get('Cache-Control');",
                  "    if (cacheControl) {",
                  "        pm.expect(cacheControl).to.be.a('string');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Paginação - Interface Amigável",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{clienteToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/fretes/meus-fretes?page=1&limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["fretes", "meus-fretes"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Pagination provides clear information', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    if (jsonData.data && jsonData.data.pagination) {",
                  "        const pagination = jsonData.data.pagination;",
                  "        pm.expect(pagination).to.have.property('currentPage');",
                  "        pm.expect(pagination).to.have.property('totalPages');",
                  "        pm.expect(pagination).to.have.property('totalItems');",
                  "        pm.expect(pagination).to.have.property('itemsPerPage');",
                  "        ",
                  "        // Verificar se os valores são lógicos",
                  "        pm.expect(pagination.currentPage).to.be.at.least(1);",
                  "        pm.expect(pagination.totalPages).to.be.at.least(1);",
                  "        pm.expect(pagination.itemsPerPage).to.be.at.least(1);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Acessibilidade - Dados Estruturados",
      "item": [
        {
          "name": "Dados Bem Estruturados - Frete",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{clienteToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/fretes/{{freteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["fretes", "{{freteId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Data structure is clear and accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    const frete = jsonData.data;",
                  "    ",
                  "    // Verificar se os dados estão bem organizados",
                  "    pm.expect(frete).to.have.property('id');",
                  "    pm.expect(frete).to.have.property('codigo');",
                  "    pm.expect(frete).to.have.property('status');",
                  "    ",
                  "    // Verificar se os tipos de dados são consistentes",
                  "    pm.expect(frete.id).to.be.a('number');",
                  "    pm.expect(frete.codigo).to.be.a('string');",
                  "    pm.expect(frete.status).to.be.a('string');",
                  "    ",
                  "    // Verificar se não há valores nulos desnecessários",
                  "    Object.keys(frete).forEach(key => {",
                  "        if (frete[key] === null) {",
                  "            console.log(`Warning: Field ${key} is null`);",
                  "        }",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Mensagens de Status Legíveis",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{clienteToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/fretes/{{freteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["fretes", "{{freteId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status values are human-readable', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    const frete = jsonData.data;",
                  "    ",
                  "    if (frete.status) {",
                  "        // Verificar se o status é legível (não é um código numérico)",
                  "        pm.expect(frete.status).to.be.a('string');",
                  "        pm.expect(frete.status).to.not.match(/^\\d+$/);",
                  "        ",
                  "        // Verificar se contém caracteres legíveis",
                  "        pm.expect(frete.status.length).to.be.at.least(3);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Robustez - Tratamento de Erros",
      "item": [
        {
          "name": "Tratamento de Dados Malformados",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@test.com\",\n  \"password\": \"123\",\n  \"userType\": \"cliente\",\n  \"extraField\": \"unexpected_data\",\n  \"nestedObject\": {\n    \"field1\": \"value1\",\n    \"field2\": \"value2\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API handles malformed data gracefully', function () {",
                  "    // A API deve processar dados extras sem quebrar",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    ",
                  "    // Verificar se a resposta não contém dados sensíveis",
                  "    pm.expect(JSON.stringify(jsonData)).to.not.include('password');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Tratamento de Content-Type Incorreto",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "email=test@test.com&password=123&userType=cliente"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API handles wrong content-type gracefully', function () {",
                  "    // A API deve retornar erro apropriado para content-type incorreto",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 415]);",
                  "    ",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
