{
  "info": {
    "name": "Broday Transportes - Testes Completos",
    "description": "Coleção completa de testes funcionais e não funcionais para a API da Broday Transportes",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "clienteToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "motoristaToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "freteId",
      "value": "",
      "type": "string"
    },
    {
      "key": "clienteId",
      "value": "",
      "type": "string"
    },
    {
      "key": "motoristaId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Testes de Unidade",
      "item": [
        {
          "name": "Health Check - Validação Básica",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has message property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Response has timestamp property', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validação de Estrutura de Resposta - API Root",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                ""
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure validation', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "    pm.expect(jsonData).to.have.property('endpoints');",
                  "});",
                  "",
                  "pm.test('Version format validation', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+\\.\\d+$/);",
                  "});",
                  "",
                  "pm.test('Endpoints object structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.endpoints).to.be.an('object');",
                  "    pm.expect(jsonData.endpoints).to.have.property('health');",
                  "    pm.expect(jsonData.endpoints).to.have.property('auth');",
                  "    pm.expect(jsonData.endpoints).to.have.property('fretes');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validação de CORS Headers",
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "http://localhost:5500"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type,Authorization"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('CORS headers are present', function () {",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.not.be.null;",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Methods')).to.not.be.null;",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Headers')).to.not.be.null;",
                  "});",
                  "",
                  "pm.test('CORS allows correct origin', function () {",
                  "    const allowedOrigin = pm.response.headers.get('Access-Control-Allow-Origin');",
                  "    pm.expect(allowedOrigin).to.include('localhost:5500');",
                  "});",
                  "",
                  "pm.test('CORS allows correct methods', function () {",
                  "    const allowedMethods = pm.response.headers.get('Access-Control-Allow-Methods');",
                  "    pm.expect(allowedMethods).to.include('POST');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validação de Rate Limiting",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Rate limit headers are present', function () {",
                  "    const rateLimitHeader = pm.response.headers.get('X-RateLimit-Limit');",
                  "    const rateLimitRemaining = pm.response.headers.get('X-RateLimit-Remaining');",
                  "    const rateLimitReset = pm.response.headers.get('X-RateLimit-Reset');",
                  "    ",
                  "    pm.expect(rateLimitHeader).to.not.be.null;",
                  "    pm.expect(rateLimitRemaining).to.not.be.null;",
                  "    pm.expect(rateLimitReset).to.not.be.null;",
                  "});",
                  "",
                  "pm.test('Rate limit values are valid', function () {",
                  "    const rateLimitRemaining = parseInt(pm.response.headers.get('X-RateLimit-Remaining'));",
                  "    pm.expect(rateLimitRemaining).to.be.a('number');",
                  "    pm.expect(rateLimitRemaining).to.be.at.least(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validação de Content-Type",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Content-Type is application/json', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response is valid JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "2. Testes de Integração",
      "item": [
        {
          "name": "Fluxo Completo de Autenticação",
          "item": [
            {
              "name": "Registro de Cliente",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\",\n  \"nome\": \"Cliente Teste\",\n  \"telefone\": \"(11) 99999-9999\",\n  \"tipoPessoa\": \"fisica\",\n  \"documento\": \"123.456.789-00\",\n  \"endereco\": \"Rua Teste, 123\",\n  \"cidade\": \"São Paulo\",\n  \"estado\": \"SP\",\n  \"cep\": \"01234-567\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/register",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "register"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('User created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('user');",
                      "    pm.expect(jsonData.data).to.have.property('tokens');",
                      "    ",
                      "    // Salvar token para próximos testes",
                      "    pm.collectionVariables.set('clienteToken', jsonData.data.tokens.accessToken);",
                      "    pm.collectionVariables.set('clienteId', jsonData.data.user.id);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Login do Cliente",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Login successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('user');",
                      "    pm.expect(jsonData.data).to.have.property('tokens');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Obter Perfil do Cliente",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/auth/profile",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "profile"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile data is correct', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('email', 'cliente.teste@broday.com');",
                      "    pm.expect(jsonData.data).to.have.property('userType', 'cliente');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Integração Frontend-Backend - Fretes",
          "item": [
            {
              "name": "Criar Frete (Cliente)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tipoCarga\": \"Eletrônicos\",\n  \"peso\": 1500.000,\n  \"volume\": 2.500,\n  \"valor\": 2500.00,\n  \"observacoes\": \"Carga frágil - teste de integração\",\n  \"origemEndereco\": \"Av. Paulista, 1000\",\n  \"origemCidade\": \"São Paulo\",\n  \"origemEstado\": \"SP\",\n  \"origemCep\": \"01310-100\",\n  \"destinoEndereco\": \"Rua da Consolação, 2000\",\n  \"destinoCidade\": \"São Paulo\",\n  \"destinoEstado\": \"SP\",\n  \"destinoCep\": \"01302-000\",\n  \"dataColeta\": \"2024-12-15T10:00:00Z\",\n  \"dataEntrega\": \"2024-12-16T18:00:00Z\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Frete created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('codigo');",
                      "    pm.expect(jsonData.data).to.have.property('status', 'solicitado');",
                      "    ",
                      "    // Salvar ID do frete para próximos testes",
                      "    pm.collectionVariables.set('freteId', jsonData.data.id);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Listar Fretes do Cliente",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Fretes list returned', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('fretes');",
                      "    pm.expect(jsonData.data.fretes).to.be.an('array');",
                      "    pm.expect(jsonData.data.fretes.length).to.be.at.least(1);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Integração com Banco de Dados",
          "item": [
            {
              "name": "Verificar Consistência de Dados - Cliente",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/auth/profile",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "profile"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Database consistency check', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const user = jsonData.data;",
                      "    ",
                      "    // Verificar se dados estão consistentes",
                      "    pm.expect(user).to.have.property('id');",
                      "    pm.expect(user).to.have.property('email');",
                      "    pm.expect(user).to.have.property('userType');",
                      "    pm.expect(user).to.have.property('isActive');",
                      "    pm.expect(user.isActive).to.be.true;",
                      "    ",
                      "    // Verificar tipos de dados",
                      "    pm.expect(user.id).to.be.a('number');",
                      "    pm.expect(user.email).to.be.a('string');",
                      "    pm.expect(user.userType).to.be.a('string');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Verificar Relacionamentos - Frete-Cliente",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/{{freteId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "{{freteId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Frete belongs to correct client', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const frete = jsonData.data;",
                      "    ",
                      "    pm.expect(frete).to.have.property('clienteId');",
                      "    pm.expect(frete.clienteId).to.eql(parseInt(pm.collectionVariables.get('clienteId')));",
                      "});",
                      "",
                      "pm.test('Frete has correct structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const frete = jsonData.data;",
                      "    ",
                      "    pm.expect(frete).to.have.property('id');",
                      "    pm.expect(frete).to.have.property('codigo');",
                      "    pm.expect(frete).to.have.property('status');",
                      "    pm.expect(frete).to.have.property('tipoCarga');",
                      "    pm.expect(frete).to.have.property('peso');",
                      "    pm.expect(frete).to.have.property('valor');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "3. Testes de Sistema",
      "item": [
        {
          "name": "Fluxo Completo Cliente - Solicitação de Frete",
          "item": [
            {
              "name": "1. Login Cliente",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.sistema@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.collectionVariables.set('clienteToken', jsonData.data.tokens.accessToken);",
                      "    pm.collectionVariables.set('clienteId', jsonData.data.user.id);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "2. Criar Solicitação de Frete",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tipoCarga\": \"Móveis\",\n  \"peso\": 2000.000,\n  \"volume\": 5.000,\n  \"valor\": 3500.00,\n  \"observacoes\": \"Móveis para escritório - teste de sistema\",\n  \"origemEndereco\": \"Rua das Flores, 500\",\n  \"origemCidade\": \"São Paulo\",\n  \"origemEstado\": \"SP\",\n  \"origemCep\": \"01234-567\",\n  \"destinoEndereco\": \"Av. Faria Lima, 2000\",\n  \"destinoCidade\": \"São Paulo\",\n  \"destinoEstado\": \"SP\",\n  \"destinoCep\": \"01451-000\",\n  \"dataColeta\": \"2024-12-20T09:00:00Z\",\n  \"dataEntrega\": \"2024-12-21T17:00:00Z\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Frete created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.status).to.eql('solicitado');",
                      "    pm.collectionVariables.set('freteId', jsonData.data.id);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "3. Verificar Frete na Lista do Cliente",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Frete appears in client list', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    const freteId = parseInt(pm.collectionVariables.get('freteId'));",
                      "    ",
                      "    const frete = jsonData.data.fretes.find(f => f.id === freteId);",
                      "    pm.expect(frete).to.not.be.undefined;",
                      "    pm.expect(frete.status).to.eql('solicitado');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "4. Visualizar Detalhes do Frete",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/{{freteId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "{{freteId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Frete details retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    const frete = jsonData.data;",
                      "    ",
                      "    pm.expect(frete.id).to.eql(parseInt(pm.collectionVariables.get('freteId')));",
                      "    pm.expect(frete.tipoCarga).to.eql('Móveis');",
                      "    pm.expect(frete.valor).to.eql(3500.00);",
                      "    pm.expect(frete.clienteId).to.eql(parseInt(pm.collectionVariables.get('clienteId')));",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Fluxo Completo Motorista - Aceitar Frete",
          "item": [
            {
              "name": "1. Login Motorista",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"motorista.sistema@broday.com\",\n  \"password\": \"motorista123\",\n  \"userType\": \"motorista\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Motorista login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.collectionVariables.set('motoristaToken', jsonData.data.tokens.accessToken);",
                      "    pm.collectionVariables.set('motoristaId', jsonData.data.user.id);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "2. Visualizar Fretes Disponíveis",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{motoristaToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/disponiveis",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "disponiveis"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Available freights retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('fretes');",
                      "    pm.expect(jsonData.data.fretes).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "3. Aceitar Frete",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{motoristaToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{baseUrl}}/fretes/{{freteId}}/aceitar",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "{{freteId}}",
                    "aceitar"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Frete accepted successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.status).to.eql('aceito');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "4. Atualizar Status para Em Trânsito",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{motoristaToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"em_transito\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/fretes/{{freteId}}/status",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "{{freteId}}",
                    "status"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status updated to em_transito', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.status).to.eql('em_transito');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "5. Finalizar Frete",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{motoristaToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"entregue\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/fretes/{{freteId}}/status",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "{{freteId}}",
                    "status"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Frete completed successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.status).to.eql('entregue');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Fluxo Administrativo - Gestão Completa",
          "item": [
            {
              "name": "1. Login Administrador",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"admin.sistema@broday.com\",\n  \"password\": \"admin123\",\n  \"userType\": \"admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Admin login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.collectionVariables.set('adminToken', jsonData.data.tokens.accessToken);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "2. Visualizar Todos os Fretes",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('All freights retrieved by admin', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('fretes');",
                      "    pm.expect(jsonData.data.fretes).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "3. Visualizar Estatísticas do Sistema",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{adminToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/admin/dashboard",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "dashboard"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Admin dashboard data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('estatisticas');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "4. Testes de Regressão",
      "item": [
        {
          "name": "Validação de Funcionalidades Críticas",
          "item": [
            {
              "name": "Autenticação - Login Válido",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Login still works after changes', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('tokens');",
                      "    pm.expect(jsonData.data.tokens).to.have.property('accessToken');",
                      "    pm.expect(jsonData.data.tokens).to.have.property('refreshToken');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Autenticação - Login Inválido",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"senha_errada\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Invalid login still returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData.message).to.include('credenciais');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Criação de Frete - Dados Válidos",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tipoCarga\": \"Alimentos\",\n  \"peso\": 500.000,\n  \"volume\": 1.000,\n  \"valor\": 800.00,\n  \"observacoes\": \"Teste de regressão - dados válidos\",\n  \"origemEndereco\": \"Rua Teste, 100\",\n  \"origemCidade\": \"São Paulo\",\n  \"origemEstado\": \"SP\",\n  \"origemCep\": \"01000-000\",\n  \"destinoEndereco\": \"Av. Teste, 200\",\n  \"destinoCidade\": \"São Paulo\",\n  \"destinoEstado\": \"SP\",\n  \"destinoCep\": \"02000-000\",\n  \"dataColeta\": \"2024-12-25T08:00:00Z\",\n  \"dataEntrega\": \"2024-12-25T16:00:00Z\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Frete creation still works', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    pm.expect(jsonData.data).to.have.property('codigo');",
                      "    pm.expect(jsonData.data.status).to.eql('solicitado');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Criação de Frete - Dados Inválidos",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tipoCarga\": \"\",\n  \"peso\": -100,\n  \"volume\": -50,\n  \"valor\": -200,\n  \"origemEndereco\": \"\",\n  \"origemCidade\": \"\",\n  \"origemEstado\": \"\",\n  \"origemCep\": \"\",\n  \"destinoEndereco\": \"\",\n  \"destinoCidade\": \"\",\n  \"destinoEstado\": \"\",\n  \"destinoCep\": \"\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Invalid data still returns 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData).to.have.property('errors');",
                      "    pm.expect(jsonData.errors).to.be.an('array');",
                      "    pm.expect(jsonData.errors.length).to.be.at.least(1);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Validação de Endpoints Críticos",
          "item": [
            {
              "name": "Health Check - Disponibilidade",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Health check still works', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.message).to.include('funcionando');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "API Root - Estrutura Mantida",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    ""
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('API root structure unchanged', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('version');",
                      "    pm.expect(jsonData).to.have.property('endpoints');",
                      "    pm.expect(jsonData.endpoints).to.have.property('health');",
                      "    pm.expect(jsonData.endpoints).to.have.property('auth');",
                      "    pm.expect(jsonData.endpoints).to.have.property('fretes');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Rota Não Encontrada - 404",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/rota-inexistente",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "rota-inexistente"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('404 still works for non-existent routes', function () {",
                      "    pm.response.to.have.status(404);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData.message).to.include('não encontrada');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Validação de Performance Crítica",
          "item": [
            {
              "name": "Tempo de Resposta - Health Check",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response time still acceptable', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "",
                      "pm.test('Response time is consistent', function () {",
                      "    // Este teste verifica se o tempo de resposta não degradou significativamente",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Tempo de Resposta - Login",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Login response time acceptable', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Validação de Segurança",
          "item": [
            {
              "name": "Acesso Não Autorizado - Sem Token",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Unauthorized access still blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData.message).to.include('token');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Acesso Não Autorizado - Token Inválido",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer token_invalido_123"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Invalid token still blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Rate Limiting - Ainda Funcionando",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Rate limiting headers still present', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const rateLimitHeader = pm.response.headers.get('X-RateLimit-Limit');",
                      "    const rateLimitRemaining = pm.response.headers.get('X-RateLimit-Remaining');",
                      "    ",
                      "    pm.expect(rateLimitHeader).to.not.be.null;",
                      "    pm.expect(rateLimitRemaining).to.not.be.null;",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "5. Testes de Usabilidade",
      "item": [
        {
          "name": "Facilidade de Uso - Interface de API",
          "item": [
            {
              "name": "Mensagens de Erro Claras - Login Inválido",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"email_invalido\",\n  \"password\": \"123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Error message is clear and helpful', function () {",
                      "    pm.response.to.have.status(400);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData.message).to.be.a('string');",
                      "    pm.expect(jsonData.message.length).to.be.at.least(10);",
                      "    ",
                      "    // Verificar se a mensagem não é muito técnica",
                      "    pm.expect(jsonData.message).to.not.include('undefined');",
                      "    pm.expect(jsonData.message).to.not.include('null');",
                      "});",
                      "",
                      "pm.test('Error response structure is consistent', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Validação de Campos - Mensagens Específicas",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"\",\n  \"password\": \"\",\n  \"userType\": \"\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Validation errors are specific and actionable', function () {",
                      "    pm.response.to.have.status(400);",
                      "    const jsonData = pm.response.json();",
                      "    ",
                      "    if (jsonData.errors && jsonData.errors.length > 0) {",
                      "        jsonData.errors.forEach(error => {",
                      "            pm.expect(error).to.have.property('field');",
                      "            pm.expect(error).to.have.property('message');",
                      "            pm.expect(error.message).to.be.a('string');",
                      "            pm.expect(error.message.length).to.be.at.least(5);",
                      "        });",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Resposta de Sucesso - Informações Completas",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Success response provides all necessary information', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    ",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('user');",
                      "    pm.expect(jsonData.data).to.have.property('tokens');",
                      "    ",
                      "    // Verificar se as informações do usuário são completas",
                      "    const user = jsonData.data.user;",
                      "    pm.expect(user).to.have.property('id');",
                      "    pm.expect(user).to.have.property('email');",
                      "    pm.expect(user).to.have.property('userType');",
                      "    ",
                      "    // Verificar se os tokens estão presentes",
                      "    const tokens = jsonData.data.tokens;",
                      "    pm.expect(tokens).to.have.property('accessToken');",
                      "    pm.expect(tokens).to.have.property('refreshToken');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Intuitividade - Navegação e Estrutura",
          "item": [
            {
              "name": "Estrutura de URLs Lógica",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    ""
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('API structure is intuitive and logical', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    ",
                      "    // Verificar se os endpoints seguem uma estrutura lógica",
                      "    const endpoints = jsonData.endpoints;",
                      "    pm.expect(endpoints).to.have.property('auth');",
                      "    pm.expect(endpoints).to.have.property('fretes');",
                      "    pm.expect(endpoints).to.have.property('health');",
                      "    ",
                      "    // Verificar se as URLs são RESTful",
                      "    pm.expect(endpoints.auth).to.include('/auth');",
                      "    pm.expect(endpoints.fretes).to.include('/fretes');",
                      "    pm.expect(endpoints.health).to.include('/health');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Consistência de Respostas",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response format is consistent across endpoints', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    ",
                      "    // Verificar estrutura padrão de resposta",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData.success).to.be.a('boolean');",
                      "    pm.expect(jsonData.message).to.be.a('string');",
                      "    ",
                      "    // Verificar se não há campos inesperados",
                      "    const allowedFields = ['success', 'message', 'data', 'timestamp', 'version', 'errors'];",
                      "    Object.keys(jsonData).forEach(key => {",
                      "        pm.expect(allowedFields).to.include(key);",
                      "    });",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Experiência do Usuário - Performance e Feedback",
          "item": [
            {
              "name": "Tempo de Resposta Aceitável",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response time is acceptable for good UX', function () {",
                      "    pm.response.to.have.status(200);",
                      "    ",
                      "    // Tempo de resposta deve ser menor que 1 segundo para boa UX",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test('Response time is consistent', function () {",
                      "    // Verificar se o tempo não varia muito (consistência)",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Feedback Visual - Headers Informativos",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response headers provide useful information', function () {",
                      "    pm.response.to.have.status(200);",
                      "    ",
                      "    // Verificar headers úteis para o cliente",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                      "    ",
                      "    // Verificar se há headers de cache se aplicável",
                      "    const cacheControl = pm.response.headers.get('Cache-Control');",
                      "    if (cacheControl) {",
                      "        pm.expect(cacheControl).to.be.a('string');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Paginação - Interface Amigável",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes?page=1&limit=5",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "5"
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Pagination provides clear information', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    ",
                      "    if (jsonData.data && jsonData.data.pagination) {",
                      "        const pagination = jsonData.data.pagination;",
                      "        pm.expect(pagination).to.have.property('currentPage');",
                      "        pm.expect(pagination).to.have.property('totalPages');",
                      "        pm.expect(pagination).to.have.property('totalItems');",
                      "        pm.expect(pagination).to.have.property('itemsPerPage');",
                      "        ",
                      "        // Verificar se os valores são lógicos",
                      "        pm.expect(pagination.currentPage).to.be.at.least(1);",
                      "        pm.expect(pagination.totalPages).to.be.at.least(1);",
                      "        pm.expect(pagination.itemsPerPage).to.be.at.least(1);",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Acessibilidade - Dados Estruturados",
          "item": [
            {
              "name": "Dados Bem Estruturados - Frete",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/{{freteId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "{{freteId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Data structure is clear and accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    const frete = jsonData.data;",
                      "    ",
                      "    // Verificar se os dados estão bem organizados",
                      "    pm.expect(frete).to.have.property('id');",
                      "    pm.expect(frete).to.have.property('codigo');",
                      "    pm.expect(frete).to.have.property('status');",
                      "    ",
                      "    // Verificar se os tipos de dados são consistentes",
                      "    pm.expect(frete.id).to.be.a('number');",
                      "    pm.expect(frete.codigo).to.be.a('string');",
                      "    pm.expect(frete.status).to.be.a('string');",
                      "    ",
                      "    // Verificar se não há valores nulos desnecessários",
                      "    Object.keys(frete).forEach(key => {",
                      "        if (frete[key] === null) {",
                      "            console.log(`Warning: Field ${key} is null`);",
                      "        }",
                      "    });",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Mensagens de Status Legíveis",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/{{freteId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "{{freteId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status values are human-readable', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    const frete = jsonData.data;",
                      "    ",
                      "    if (frete.status) {",
                      "        // Verificar se o status é legível (não é um código numérico)",
                      "        pm.expect(frete.status).to.be.a('string');",
                      "        pm.expect(frete.status).to.not.match(/^\\d+$/);",
                      "        ",
                      "        // Verificar se contém caracteres legíveis",
                      "        pm.expect(frete.status.length).to.be.at.least(3);",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Robustez - Tratamento de Erros",
          "item": [
            {
              "name": "Tratamento de Dados Malformados",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test@test.com\",\n  \"password\": \"123\",\n  \"userType\": \"cliente\",\n  \"extraField\": \"unexpected_data\",\n  \"nestedObject\": {\n    \"field1\": \"value1\",\n    \"field2\": \"value2\"\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('API handles malformed data gracefully', function () {",
                      "    // A API deve processar dados extras sem quebrar",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "    ",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    ",
                      "    // Verificar se a resposta não contém dados sensíveis",
                      "    pm.expect(JSON.stringify(jsonData)).to.not.include('password');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Tratamento de Content-Type Incorreto",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "text/plain"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "email=test@test.com&password=123&userType=cliente"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('API handles wrong content-type gracefully', function () {",
                      "    // A API deve retornar erro apropriado para content-type incorreto",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 415]);",
                      "    ",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "6. Testes de Desempenho",
      "item": [
        {
          "name": "Testes de Carga Básica",
          "item": [
            {
              "name": "Health Check - Múltiplas Requisições",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response time under load is acceptable', function () {",
                      "    // Para testes de carga, tempo deve ser menor que 2 segundos",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "",
                      "pm.test('Server handles concurrent requests', function () {",
                      "    // Verificar se o servidor não retorna erro 500 sob carga",
                      "    pm.expect(pm.response.code).to.not.equal(500);",
                      "});",
                      "",
                      "pm.test('Memory usage is stable', function () {",
                      "    // Verificar se não há vazamentos de memória (tempo de resposta consistente)",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Login - Performance Sob Carga",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Login performance under load', function () {",
                      "    // Login deve ser rápido mesmo sob carga",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "",
                      "pm.test('Authentication is reliable under load', function () {",
                      "    // Verificar se a autenticação não falha sob carga",
                      "    if (pm.response.code === 200) {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.true;",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Testes de Estresse",
          "item": [
            {
              "name": "Estresse - Health Check (100 requests)",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Este teste deve ser executado 100 vezes para simular carga",
                      "pm.test('Stress test - Response time degradation check', function () {",
                      "    // Verificar se o tempo de resposta não degrada significativamente",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Stress test - Error rate check', function () {",
                      "    // Verificar se a taxa de erro não aumenta sob estresse",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
                      "});",
                      "",
                      "pm.test('Stress test - Memory stability', function () {",
                      "    // Verificar se não há vazamentos de memória",
                      "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Estresse - Login (50 requests)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Este teste deve ser executado 50 vezes para simular carga",
                      "pm.test('Login stress test - Performance check', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Login stress test - Success rate check', function () {",
                      "    // Verificar se a taxa de sucesso se mantém",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 429]);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Testes de Volume de Dados",
          "item": [
            {
              "name": "Volume - Lista de Fretes (Grande Dataset)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes?limit=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Large dataset performance', function () {",
                      "    // Verificar se a API consegue lidar com grandes volumes de dados",
                      "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                      "});",
                      "",
                      "pm.test('Large dataset response size check', function () {",
                      "    // Verificar se a resposta não é muito grande",
                      "    const responseSize = pm.response.responseSize;",
                      "    pm.expect(responseSize).to.be.below(1000000); // 1MB",
                      "});",
                      "",
                      "pm.test('Large dataset structure integrity', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.true;",
                      "        ",
                      "        if (jsonData.data && jsonData.data.fretes) {",
                      "            pm.expect(jsonData.data.fretes).to.be.an('array');",
                      "        }",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Volume - Criação de Frete com Dados Grandes",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tipoCarga\": \"Eletrônicos\",\n  \"peso\": 1500.000,\n  \"volume\": 2.500,\n  \"valor\": 2500.00,\n  \"observacoes\": \"Teste de volume de dados - observações muito longas para testar o limite da API e verificar se ela consegue processar grandes volumes de texto sem degradar a performance significativamente. Esta observação contém muito texto para simular um cenário real onde o usuário pode inserir informações detalhadas sobre a carga.\",\n  \"origemEndereco\": \"Rua Teste de Volume de Dados, 123, Apto 456, Bloco A, Conjunto 789\",\n  \"origemCidade\": \"São Paulo\",\n  \"origemEstado\": \"SP\",\n  \"origemCep\": \"01234-567\",\n  \"destinoEndereco\": \"Avenida Teste de Performance, 2000, Sala 1001, Edifício Comercial Teste\",\n  \"destinoCidade\": \"São Paulo\",\n  \"destinoEstado\": \"SP\",\n  \"destinoCep\": \"01310-100\",\n  \"dataColeta\": \"2024-12-25T08:00:00Z\",\n  \"dataEntrega\": \"2024-12-26T18:00:00Z\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Large data payload performance', function () {",
                      "    // Verificar se a API consegue processar dados grandes rapidamente",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Large data payload processing', function () {",
                      "    // Verificar se os dados grandes são processados corretamente",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
                      "    ",
                      "    if (pm.response.code === 201) {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.true;",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Testes de Concorrência",
          "item": [
            {
              "name": "Concorrência - Múltiplos Logins Simultâneos",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Este teste deve ser executado simultaneamente por múltiplos usuários",
                      "pm.test('Concurrent login performance', function () {",
                      "    // Verificar se múltiplos logins simultâneos não degradam a performance",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Concurrent login reliability', function () {",
                      "    // Verificar se os logins simultâneos não causam erros",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 429]);",
                      "});",
                      "",
                      "pm.test('Concurrent login data integrity', function () {",
                      "    if (pm.response.code === 200) {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.true;",
                      "        pm.expect(jsonData.data).to.have.property('tokens');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Concorrência - Múltiplas Consultas de Fretes",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Este teste deve ser executado simultaneamente por múltiplos clientes",
                      "pm.test('Concurrent data access performance', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "",
                      "pm.test('Concurrent data access reliability', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 429]);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Testes de Limite de Recursos",
          "item": [
            {
              "name": "Limite - Rate Limiting",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Rate limiting is working', function () {",
                      "    // Verificar se o rate limiting está funcionando",
                      "    const rateLimitRemaining = pm.response.headers.get('X-RateLimit-Remaining');",
                      "    const rateLimitReset = pm.response.headers.get('X-RateLimit-Reset');",
                      "    ",
                      "    if (rateLimitRemaining) {",
                      "        const remaining = parseInt(rateLimitRemaining);",
                      "        pm.expect(remaining).to.be.at.least(0);",
                      "    }",
                      "});",
                      "",
                      "pm.test('Rate limiting response when exceeded', function () {",
                      "    // Verificar se retorna 429 quando o limite é excedido",
                      "    if (pm.response.code === 429) {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.false;",
                      "        pm.expect(jsonData.message).to.include('Muitas tentativas');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Limite - Tamanho de Payload",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"teste.limite@broday.com\",\n  \"password\": \"teste123\",\n  \"userType\": \"cliente\",\n  \"nome\": \"Teste de Limite de Payload\",\n  \"telefone\": \"(11) 99999-9999\",\n  \"tipoPessoa\": \"fisica\",\n  \"documento\": \"123.456.789-00\",\n  \"endereco\": \"Rua Teste de Limite de Payload, 123, Apto 456, Bloco A, Conjunto 789, Torre Norte, Andar 10\",\n  \"cidade\": \"São Paulo\",\n  \"estado\": \"SP\",\n  \"cep\": \"01234-567\",\n  \"observacoes\": \"Teste de limite de payload com dados extensos para verificar se a API consegue processar requisições com payloads grandes sem degradar a performance ou causar erros de memória.\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/register",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "register"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Large payload processing', function () {",
                      "    // Verificar se payloads grandes são processados",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 413]);",
                      "});",
                      "",
                      "pm.test('Large payload performance', function () {",
                      "    // Verificar se o tempo de resposta não degrada com payloads grandes",
                      "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Métricas de Performance",
          "item": [
            {
              "name": "Métricas - Tempo de Resposta Médio",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Este teste deve ser executado múltiplas vezes para calcular métricas",
                      "pm.test('Response time metrics', function () {",
                      "    const responseTime = pm.response.responseTime;",
                      "    ",
                      "    // Log para análise posterior",
                      "    console.log(`Response Time: ${responseTime}ms`);",
                      "    ",
                      "    // Verificar se está dentro dos limites aceitáveis",
                      "    pm.expect(responseTime).to.be.below(2000);",
                      "});",
                      "",
                      "pm.test('Response size metrics', function () {",
                      "    const responseSize = pm.response.responseSize;",
                      "    ",
                      "    // Log para análise posterior",
                      "    console.log(`Response Size: ${responseSize} bytes`);",
                      "    ",
                      "    // Verificar se o tamanho é razoável",
                      "    pm.expect(responseSize).to.be.below(10000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "7. Testes de Segurança",
      "item": [
        {
          "name": "Autenticação e Autorização",
          "item": [
            {
              "name": "Acesso Não Autorizado - Sem Token",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Unauthorized access is blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData.message).to.include('token');",
                      "});",
                      "",
                      "pm.test('No sensitive data leaked in error response', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const responseText = JSON.stringify(jsonData);",
                      "    ",
                      "    // Verificar se não há vazamento de informações sensíveis",
                      "    pm.expect(responseText).to.not.include('password');",
                      "    pm.expect(responseText).to.not.include('secret');",
                      "    pm.expect(responseText).to.not.include('key');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Token Inválido - Formato Incorreto",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer token_invalido_123"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Invalid token is rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});",
                      "",
                      "pm.test('Invalid token error message is generic', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Mensagem de erro deve ser genérica para não vazar informações",
                      "    pm.expect(jsonData.message).to.not.include('invalid');",
                      "    pm.expect(jsonData.message).to.not.include('expired');",
                      "    pm.expect(jsonData.message).to.not.include('malformed');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Token Expirado - Simulação",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImVtYWlsIjoiY2xpZW50ZUB0ZXN0ZS5jb20iLCJ1c2VyVHlwZSI6ImNsaWVudGUiLCJpYXQiOjE2MzA0MDk2MDAsImV4cCI6MTYzMDQwOTYwMH0.invalid_signature"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/fretes/meus-fretes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "fretes",
                    "meus-fretes"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Expired token is rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Acesso Cross-User - Token de Outro Usuário",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{clienteToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/admin/dashboard",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "dashboard"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Cross-user access is blocked', function () {",
                      "    pm.response.to.have.status(403);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "    pm.expect(jsonData.message).to.include('acesso');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Validação de Entrada e SQL Injection",
          "item": [
            {
              "name": "SQL Injection - Login",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"admin@broday.com'; DROP TABLE users; --\",\n  \"password\": \"123\",\n  \"userType\": \"admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('SQL injection attempt is blocked', function () {",
                      "    pm.response.to.have.status(400);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});",
                      "",
                      "pm.test('No database error exposed', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const responseText = JSON.stringify(jsonData);",
                      "    ",
                      "    // Verificar se não há vazamento de erros de banco",
                      "    pm.expect(responseText).to.not.include('SQL');",
                      "    pm.expect(responseText).to.not.include('database');",
                      "    pm.expect(responseText).to.not.include('syntax');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "XSS - Input Sanitization",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"<script>alert('XSS')</script>@test.com\",\n  \"password\": \"123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('XSS attempt is blocked', function () {",
                      "    pm.response.to.have.status(400);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});",
                      "",
                      "pm.test('Script tags are sanitized', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const responseText = JSON.stringify(jsonData);",
                      "    ",
                      "    // Verificar se scripts não são executados",
                      "    pm.expect(responseText).to.not.include('<script>');",
                      "    pm.expect(responseText).to.not.include('alert(');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "NoSQL Injection - JSON Injection",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": {\"$ne\": null},\n  \"password\": {\"$ne\": null},\n  \"userType\": \"admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('NoSQL injection attempt is blocked', function () {",
                      "    pm.response.to.have.status(400);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Validação de Headers e CORS",
          "item": [
            {
              "name": "CORS - Origin Não Permitido",
              "request": {
                "method": "OPTIONS",
                "header": [
                  {
                    "key": "Origin",
                    "value": "https://malicious-site.com"
                  },
                  {
                    "key": "Access-Control-Request-Method",
                    "value": "POST"
                  },
                  {
                    "key": "Access-Control-Request-Headers",
                    "value": "Content-Type,Authorization"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('CORS blocks unauthorized origins', function () {",
                      "    const allowedOrigin = pm.response.headers.get('Access-Control-Allow-Origin');",
                      "    pm.expect(allowedOrigin).to.not.include('malicious-site.com');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Security Headers - Helmet",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Security headers are present', function () {",
                      "    // Verificar headers de segurança do Helmet",
                      "    const xFrameOptions = pm.response.headers.get('X-Frame-Options');",
                      "    const xContentTypeOptions = pm.response.headers.get('X-Content-Type-Options');",
                      "    const xXSSProtection = pm.response.headers.get('X-XSS-Protection');",
                      "    ",
                      "    pm.expect(xFrameOptions).to.not.be.null;",
                      "    pm.expect(xContentTypeOptions).to.not.be.null;",
                      "});",
                      "",
                      "pm.test('X-Frame-Options prevents clickjacking', function () {",
                      "    const xFrameOptions = pm.response.headers.get('X-Frame-Options');",
                      "    pm.expect(xFrameOptions).to.be.oneOf(['DENY', 'SAMEORIGIN']);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Rate Limiting e DDoS",
          "item": [
            {
              "name": "Rate Limiting - Muitas Requisições",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Este teste deve ser executado rapidamente muitas vezes",
                      "pm.test('Rate limiting is enforced', function () {",
                      "    if (pm.response.code === 429) {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.false;",
                      "        pm.expect(jsonData.message).to.include('Muitas tentativas');",
                      "    }",
                      "});",
                      "",
                      "pm.test('Rate limit headers are present', function () {",
                      "    const rateLimitHeader = pm.response.headers.get('X-RateLimit-Limit');",
                      "    const rateLimitRemaining = pm.response.headers.get('X-RateLimit-Remaining');",
                      "    ",
                      "    pm.expect(rateLimitHeader).to.not.be.null;",
                      "    pm.expect(rateLimitRemaining).to.not.be.null;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "DDoS Simulation - Health Check",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Simular ataque DDoS com muitas requisições simultâneas",
                      "pm.test('Server handles DDoS simulation', function () {",
                      "    // Verificar se o servidor não cai sob carga",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 429, 503]);",
                      "});",
                      "",
                      "pm.test('Response time under DDoS simulation', function () {",
                      "    // Verificar se o tempo de resposta não degrada muito",
                      "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Validação de Dados Sensíveis",
          "item": [
            {
              "name": "Vazamento de Senhas - Login",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Password is not exposed in response', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    const responseText = JSON.stringify(jsonData);",
                      "    ",
                      "    // Verificar se a senha não aparece na resposta",
                      "    pm.expect(responseText).to.not.include('cliente123');",
                      "    pm.expect(responseText).to.not.include('password');",
                      "});",
                      "",
                      "pm.test('Sensitive data is properly handled', function () {",
                      "    const jsonData = pm.response.json();",
                      "    ",
                      "    if (jsonData.data && jsonData.data.user) {",
                      "        const user = jsonData.data.user;",
                      "        // Verificar se dados sensíveis não estão expostos",
                      "        pm.expect(user).to.not.have.property('password');",
                      "        pm.expect(user).to.not.have.property('salt');",
                      "        pm.expect(user).to.not.have.property('hash');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Vazamento de Tokens - Logs",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"cliente.teste@broday.com\",\n  \"password\": \"cliente123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Tokens are not logged in response headers', function () {",
                      "    pm.response.to.have.status(200);",
                      "    ",
                      "    // Verificar se tokens não aparecem em headers",
                      "    const headers = pm.response.headers.all();",
                      "    headers.forEach(header => {",
                      "        if (header.key && header.value) {",
                      "            pm.expect(header.value).to.not.include('Bearer');",
                      "        }",
                      "    });",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Validação de Entrada Maliciosa",
          "item": [
            {
              "name": "Path Traversal - Arquivos do Sistema",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/../../../etc/passwd",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "..",
                    "..",
                    "..",
                    "etc",
                    "passwd"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Path traversal is blocked', function () {",
                      "    pm.response.to.have.status(404);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});",
                      "",
                      "pm.test('No system files are exposed', function () {",
                      "    const responseText = pm.response.text();",
                      "    pm.expect(responseText).to.not.include('root:');",
                      "    pm.expect(responseText).to.not.include('bin:');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Command Injection - Input Validation",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test@test.com; rm -rf /\",\n  \"password\": \"123\",\n  \"userType\": \"cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "auth",
                    "login"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Command injection is blocked', function () {",
                      "    pm.response.to.have.status(400);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.false;",
                      "});",
                      "",
                      "pm.test('No command execution evidence', function () {",
                      "    const jsonData = pm.response.json();",
                      "    const responseText = JSON.stringify(jsonData);",
                      "    pm.expect(responseText).to.not.include('rm -rf');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Validação de HTTPS e Certificados",
          "item": [
            {
              "name": "HTTPS Enforcement - Headers",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Security headers encourage HTTPS', function () {",
                      "    const strictTransportSecurity = pm.response.headers.get('Strict-Transport-Security');",
                      "    ",
                      "    // Em produção, deve ter HSTS",
                      "    if (pm.response.request.url.protocol === 'https:') {",
                      "        pm.expect(strictTransportSecurity).to.not.be.null;",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}